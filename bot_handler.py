"""
Telegram bot handlers for processing user messages and commands.
Handles bot commands and URL processing for video link extraction.
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from telegram.constants import ChatAction
import asyncio

from link_extractor import VideoLinkExtractor
from config import SUPPORTED_DOMAINS, MAX_PROCESSING_TIME

logger = logging.getLogger(__name__)


class TelegramBotHandler:
    """Handles Telegram bot interactions and message processing."""
    
    def __init__(self):
        self.link_extractor = VideoLinkExtractor()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command."""
        welcome_message = (
            "üé¨ **Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot T√¨m Link Phim!**\n\n"
            "üìù **C√°ch s·ª≠ d·ª•ng:**\n"
            "‚Ä¢ G·ª≠i link t·∫≠p phim t·ª´ c√°c trang web xem phim\n"
            "‚Ä¢ Bot s·∫Ω t√¨m v√† tr·∫£ v·ªÅ link stream ho·∫∑c m3u8\n\n"
            "üåê **H·ªó tr·ª£ c√°c trang:**\n"
            "‚Ä¢ C√°c trang phim Vi·ªát Nam ph·ªï bi·∫øn\n"
            "‚Ä¢ T·ª± ƒë·ªông ph√°t hi·ªán link streaming\n\n"
            "‚ùì G√µ /help ƒë·ªÉ xem th√™m h∆∞·ªõng d·∫´n"
        )
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command."""
        help_message = (
            "üÜò **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot**\n\n"
            "**C√°c l·ªánh c√≥ s·∫µn:**\n"
            "‚Ä¢ `/start` - Kh·ªüi ƒë·ªông bot\n"
            "‚Ä¢ `/help` - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n\n\n"
            "**C√°ch t√¨m link phim:**\n"
            "1. Truy c·∫≠p trang web xem phim\n"
            "2. V√†o trang t·∫≠p phim c·ª• th·ªÉ\n"
            "3. Copy link v√† g·ª≠i cho bot\n"
            "4. Ch·ªù bot tr·∫£ v·ªÅ link streaming\n\n"
            "**ƒê·ªãnh d·∫°ng h·ªó tr·ª£:**\n"
            "‚Ä¢ Link stream tr·ª±c ti·∫øp (.mp4, .mkv)\n"
            "‚Ä¢ Link playlist m3u8\n"
            "‚Ä¢ Link embed player\n\n"
            "**L∆∞u √Ω:**\n"
            "‚Ä¢ Ch·ªâ g·ª≠i link t·∫≠p phim, kh√¥ng ph·∫£i link trang ch·ªß\n"
            "‚Ä¢ Bot c√≥ th·ªÉ m·∫•t v√†i gi√¢y ƒë·ªÉ x·ª≠ l√Ω\n"
            "‚Ä¢ N·∫øu kh√¥ng t√¨m th·∫•y link, h√£y th·ª≠ link kh√°c"
        )
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    async def handle_url_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle URL messages from users."""
        url = update.message.text.strip()
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        logger.info(f"Processing URL from user {user_id}: {url}")
        
        # Send typing action
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        
        # Validate URL format
        if not self._is_valid_url(url):
            await update.message.reply_text(
                "‚ùå **Link kh√¥ng h·ª£p l·ªá**\n\n"
                "Vui l√≤ng g·ª≠i link h·ª£p l·ªá c·ªßa trang t·∫≠p phim.\n"
                "V√≠ d·ª•: https://example.com/phim/tap-1",
                parse_mode='Markdown'
            )
            return
        
        # Send processing message
        processing_msg = await update.message.reply_text(
            "üîç **ƒêang t√¨m link streaming...**\n"
            "Vui l√≤ng ch·ªù trong gi√¢y l√°t...",
            parse_mode='Markdown'
        )
        
        try:
            # Extract video links with timeout
            links = await asyncio.wait_for(
                self.link_extractor.extract_video_links(url),
                timeout=MAX_PROCESSING_TIME
            )
            
            if links:
                await self._send_extracted_links(update, processing_msg, links, url)
            else:
                await self._send_no_links_found(update, processing_msg, url)
                
        except asyncio.TimeoutError:
            await processing_msg.edit_text(
                "‚è±Ô∏è **Qu√° th·ªùi gian x·ª≠ l√Ω**\n\n"
                "Trang web ph·∫£n h·ªìi qu√° ch·∫≠m ho·∫∑c kh√¥ng kh·∫£ d·ª•ng.\n"
                "Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c s·ª≠ d·ª•ng link kh√°c.",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error processing URL {url}: {str(e)}")
            await processing_msg.edit_text(
                "‚ùå **L·ªói x·ª≠ l√Ω**\n\n"
                "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω link c·ªßa b·∫°n.\n"
                "Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c s·ª≠ d·ª•ng link kh√°c.",
                parse_mode='Markdown'
            )
    
    async def _send_extracted_links(self, update: Update, processing_msg, links: list, original_url: str):
        """Send extracted video links to user."""
        response = "‚úÖ **ƒê√£ t√¨m th·∫•y link streaming!**\n\n"
        
        for i, link_info in enumerate(links, 1):
            quality = link_info.get('quality', 'Kh√¥ng x√°c ƒë·ªãnh')
            link_type = link_info.get('type', 'video')
            url = link_info.get('url', '')
            
            response += f"**Link {i}:**\n"
            response += f"üé• Ch·∫•t l∆∞·ª£ng: {quality}\n"
            response += f"üìπ ƒê·ªãnh d·∫°ng: {link_type}\n"
            response += f"üîó Link: `{url}`\n\n"
        
        response += "üí° **H∆∞·ªõng d·∫´n:**\n"
        response += "‚Ä¢ Copy link v√† d√°n v√†o tr√¨nh ph√°t video\n"
        response += "‚Ä¢ Link m3u8 c·∫ßn tr√¨nh ph√°t h·ªó tr·ª£ HLS\n"
        response += "‚Ä¢ M·ªôt s·ªë link c√≥ th·ªÉ c·∫ßn VPN"
        
        try:
            await processing_msg.edit_text(response, parse_mode='Markdown')
        except Exception as e:
            # If message is too long, send in parts
            logger.warning(f"Message too long, sending in parts: {e}")
            await processing_msg.edit_text(
                "‚úÖ **ƒê√£ t√¨m th·∫•y link streaming!**\n"
                "ƒêang g·ª≠i k·∫øt qu·∫£...",
                parse_mode='Markdown'
            )
            
            for i, link_info in enumerate(links, 1):
                link_msg = (
                    f"**Link {i}:**\n"
                    f"üé• Ch·∫•t l∆∞·ª£ng: {link_info.get('quality', 'Kh√¥ng x√°c ƒë·ªãnh')}\n"
                    f"üìπ ƒê·ªãnh d·∫°ng: {link_info.get('type', 'video')}\n"
                    f"üîó Link: `{link_info.get('url', '')}`"
                )
                await update.message.reply_text(link_msg, parse_mode='Markdown')
    
    async def _send_no_links_found(self, update: Update, processing_msg, url: str):
        """Send message when no video links are found."""
        await processing_msg.edit_text(
            "‚ùå **Kh√¥ng t√¨m th·∫•y link streaming**\n\n"
            "C√≥ th·ªÉ do:\n"
            "‚Ä¢ Trang web c√≥ b·∫£o v·ªá ch·ªëng bot\n"
            "‚Ä¢ Link kh√¥ng ph·∫£i trang t·∫≠p phim\n"
            "‚Ä¢ Video player s·ª≠ d·ª•ng m√£ h√≥a ƒë·∫∑c bi·ªát\n"
            "‚Ä¢ Trang web t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng\n\n"
            "üí° **G·ª£i √Ω:**\n"
            "‚Ä¢ Th·ª≠ link t·∫≠p phim kh√°c\n"
            "‚Ä¢ Ki·ªÉm tra link c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng\n"
            "‚Ä¢ Th·ª≠ l·∫°i sau v√†i ph√∫t",
            parse_mode='Markdown'
        )
    
    def _is_valid_url(self, url: str) -> bool:
        """Validate URL format and domain."""
        import re
        from urllib.parse import urlparse
        
        # Basic URL validation
        url_pattern = re.compile(
            r'^https?://'  # http:// or https://
            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
            r'localhost|'  # localhost...
            r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
            r'(?::\d+)?'  # optional port
            r'(?:/?|[/?]\S+)$', re.IGNORECASE)
        
        if not url_pattern.match(url):
            return False
        
        try:
            parsed = urlparse(url)
            return bool(parsed.netloc and parsed.scheme in ['http', 'https'])
        except Exception:
            return False
    
    async def handle_unknown_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle non-URL messages."""
        await update.message.reply_text(
            "‚ùì **Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£**\n\n"
            "Vui l√≤ng g·ª≠i link trang t·∫≠p phim ƒë·ªÉ t√¨m link streaming.\n"
            "G√µ /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt.",
            parse_mode='Markdown'
        )


def setup_bot_handlers(application):
    """Setup all bot command and message handlers."""
    handler = TelegramBotHandler()
    
    # Command handlers
    application.add_handler(CommandHandler("start", handler.start_command))
    application.add_handler(CommandHandler("help", handler.help_command))
    
    # URL message handler (messages containing http/https)
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r'https?://'), 
        handler.handle_url_message
    ))
    
    # Unknown message handler
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handler.handle_unknown_message
    ))
    
    logger.info("Bot handlers setup complete")
